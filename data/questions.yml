category: PHP5.5
questions:
    -
        question: 'Which of the following tags are an acceptable way to begin a PHP Code block?'
        answers:
            - {value: '<SCRIPT LANGUAGE="php">',         correct: true}
            - {value: '<!',                                                   correct: true}
            - {value: '<%',                                                 correct: true}
            - {value: '<?',                                                  correct: true}
    -
        question: 'Which of the following are valid PHP variables?'
        answers:
            - {value: '@$foo',      correct: true}
            - {value: '&$variable', correct: true}
            - {value: '${0x0}',       correct: true}
            - {value: '$0x0',          correct: false}
    -
        question: 'What is the best way to iterate and modify every element of an array using PHP 5?'
        answers:
            - {value: You cannot modify an array during iteration.,         correct: false}
            - {value: 'for($i = 0; $i < count($array); $i++) { /* ... * / }',    correct: false}
            - {value: 'foreach($array as $key => &$val) { /* ... * / }',      correct: true}
            - {value: 'foreach($array as $key => $val) { /* ... * / }',        correct: false}
            - {value: 'while(list($key, $val) = each($array)) { /* ... * / }',  correct: false}
    -
        question: |
                       What is the output of the following PHP code?
                       define("FOO", 10);
                       $array = [10 => FOO,"FOO" => 20];
                       print $array[$array[FOO]] * $array["FOO"];

        answers:
            - {value: FOO,  correct: false}
            - {value: 100,    correct: false}
            - {value: 200,    correct: true}
            - {value: 20,      correct: false}
            - {value: 10,      correct: false}
    -
        question: |
                       What is the output of the following PHP script?
                       $a = 1;
                       $b = 2.5;
                       $c = 0xFF;
                       $d = $b + $c;
                       $e = $d * $b;
                       $f = ($d + $e) % $a;
                       print ($f + $e);
        answers:
            - {value: 643.75, correct: true}
            - {value: 432, correct: false}
            - {value: 643, correct: false}
            - {value: 257, correct: false}
            - {value: 432.75, correct: false}
    -
        question: What is the best way to ensure that a user-defined function is always passed an object as its single parameter?
        answers:
            - {value: 'function myfunction(stdClass $a)', correct: true}
            - {value: 'function myfunction($a = stdClass)', correct: false}
            - {value: 'Use is_object() within the function', correct: false}
            - {value: 'There is no way to ensure the parameter will be an object.', correct: false}
            - {value: 'function myfunction(Object $a)', correct: false}
    -
        question: |
                       What does the following function do, when passed two integer values for $p and $q?
                       function magic($p, $q) {
                            return ($q == 0) ? $p: magic($q, $p % $q);
                        }
        answers:
            - {value: 'Loops infinitely.', correct: false}
            - {value: 'Switches the values of $p and $q.', correct: false}
            - {value: 'Determines if they are both even or odd?', correct: false}
            - {value: 'Determines the greatest common divisor between them.', correct: true}
            - {value: 'Calculates the modulus between the two.', correct: false}
    -
        question: |
                       What would go in place of ?????? below to make this script execute without a fatal error?
                       $a = 1;
                       $b = 0;
                       /* ?????? */
                       $c = $a / $b;
        answers:
            - {value: 'quit();', correct: false}
            - {value: 'die();', correct: true}
            - {value: 'stop();', correct: false}
            - {value: '__halt_compiler();', correct: true}
            - {value: 'exit();', correct: true}
    -
        question: What is the difference between the ``include`` and ``require`` language constructs?
        answers:
            - {value: 'Require constructs can''t be used with URL filenames', correct: false}
            - {value: 'Include constructs cause a fatal error if the file doesn''t exist', correct: false}
            - {value: 'There is no difference other than the name', correct: false}
            - {value: 'Include constructs are processed at run time; require constructs are processed at compile time', correct: false}
            - {value: 'Require constructs cause a fatal error if the file can''t be read', correct: true}
    -
        question: How does one access standard input/output and error streams in PHP 5?
        answers:
            - {value: 'STDIN, STDOUT and STDERR constants', correct: true}
            - {value: 'Use stdin(), stdout() and stderr() functions', correct: false}
            - {value: 'PHP::STDIN, PHP::STDOUT and PHP::STDERR class constants', correct: false}
            - {value: 'Use PHP::stdin(), PHP::stdout() and PHP::stderr() class functions', correct: false}
    -
        question: How to access standard error stream in PHP ?
        answers:
            - {value: '$stderr = STDERR;', correct: true}
            - {value: '$stderr = fopen("php://stderr", "w");', correct: true}
            - {value: '$stderr = stderr("w")', correct: false}
            - {value: '$stderr = fwrite("php://stderr");', correct: true)}

        question: |
                       What would you replace ??????? with, below, to make the string Hello, World! be displayed?
                       function myfunction() {
                           /* ??????? */
                           print $string;
                       }
                       myfunction("Hello, World!");
        answers:
            - {value: 'There is no way to do this.', correct: false}
            - {value: '$string = $argv[1];', correct: false}
            - {value: '$string = $_ARGV[0];', correct: false}
            - {value: 'list($string) = func_get_args();', correct: true}
            - {value: '$string = get_function_args();', correct: false}
    -
        question: 'For an arbitrary string $mystring, which of the following checks will correctly determine if the string PHP exists within it?'
        answers:
            - {value: 'if(strpos($mystring, "PHP") !== false)', correct: true}
            - {value: 'if(!strpos($mystring, "PHP))', correct: false}
            - {value: 'if(strpos($mystring, "PHP") === true', correct: false}
            - {value: 'if(strloc($mystring, "PHP") == true', correct: false}
            - {value: 'if(strloc($mystring, "PHP") === false)', correct: false}
